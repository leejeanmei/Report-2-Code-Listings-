#include <LiquidCrystal.h>
#define IR_SENSOR_RIGHT A4
#define IR_SENSOR_LEFT  A5

#define CLK_Encoder1 A2

const int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

int ENA = 3;
int ENB = 11;

int motor1pin1 = 1;
int motor1pin2 = 2;

int motor2pin1 = 12;
int motor2pin2 = 13;

int RotaryL = A2;

int lastStateCLK_Encoder1;

volatile unsigned long counter_Encoder1 = 0; 

float pulsesPerRevolution = 40.0;
float wheelCircumference = 20.42;
float distance_Encoder1 = 0.0;     
float avgDistance = 0.0;

void setup() {
   
  pinMode(motor1pin1, OUTPUT);
  pinMode(motor1pin2, OUTPUT);
  pinMode(motor2pin1, OUTPUT);
  pinMode(motor2pin2, OUTPUT);

  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);

  pinMode(IR_SENSOR_RIGHT, INPUT);
  pinMode(IR_SENSOR_LEFT, INPUT);

   // LCD
  lcd.begin(16, 2); // Initialize the 16x2 LCD
  lcd.clear();
  lcd.setCursor(0, 0);  
  
  pinMode(RotaryL, INPUT);

  pinMode(CLK_Encoder1, INPUT);
}

void loop() {
    int rightIRSensorValue = digitalRead(IR_SENSOR_RIGHT);
    int leftIRSensorValue = digitalRead(IR_SENSOR_LEFT);
    display();

  //If none of the sensors detects black line, then go straight
  if ((rightIRSensorValue == 1) && (leftIRSensorValue == 1))
  {
    digitalWrite(motor1pin1, HIGH);
    digitalWrite(motor1pin2, LOW);   // Motor 1 forward
    analogWrite(ENA, 120);         // Enable Motor 1

    analogWrite(ENB, 120);  
    digitalWrite(motor2pin1, HIGH);
    digitalWrite(motor2pin2, LOW);   // Motor 2 forward
     
  }
  //If right sensor detects black line, then turn right
  else if ((rightIRSensorValue == 0) && (leftIRSensorValue == 1 ))
  {
    digitalWrite(motor1pin1, LOW);
    digitalWrite(motor1pin2, HIGH);  // Motor 1 backward
    analogWrite(ENA, 170);

    analogWrite(ENB, 255);
    digitalWrite(motor2pin1, HIGH);
    digitalWrite(motor2pin2, LOW);   // Motor 2 forward
    
  }
  //If left sensor detects black line, then turn left  
  else if ((rightIRSensorValue == 1) && (leftIRSensorValue == 0 ))
  {
    digitalWrite(motor1pin1, HIGH);
    digitalWrite(motor1pin2, LOW);   // Motor 1 forward
    analogWrite(ENA, 255);

    analogWrite(ENB, 170);
    digitalWrite(motor2pin1, LOW);
    digitalWrite(motor2pin2, HIGH);  // Motor 2 backward
  } 
  //If both the sensors detect black line, then stop 
  else if((rightIRSensorValue == 0) && (leftIRSensorValue == 0))
  {
    digitalWrite(motor1pin1, LOW);
    digitalWrite(motor1pin2, LOW);  // Stop Motor 1
    analogWrite(ENA, 0);

    digitalWrite(motor2pin1, LOW);
    digitalWrite(motor2pin2, LOW);  // Stop Motor 2
    analogWrite(ENB, 0);
    
  }
}

void display() {
  int currentStateCLK_Encoder1 = digitalRead(CLK_Encoder1);
  if (currentStateCLK_Encoder1 != lastStateCLK_Encoder1) {
     counter_Encoder1++;
     distance_Encoder1 = ((counter_Encoder1 / pulsesPerRevolution) * wheelCircumference)/100;
     lastStateCLK_Encoder1 = currentStateCLK_Encoder1;
  }
    lcd.setCursor(0, 0);
    lcd.print("Distance: ");
    lcd.print(distance_Encoder1);
    lcd.print("m");
}
